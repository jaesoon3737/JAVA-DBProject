import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.sql.ResultSet;
import java.sql.DatabaseMetaData;
import java.sql.ResultSetMetaData;
import java.sql.Connection;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.sql.Date;
import java.util.Vector;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.GradientPaint;
import java.text. *;
import java.util.Random;
import java.time.*;
//package com.ict.jdbc_hr;
//set classpath=.;C:\Users\qaz77\Desktop\fd\ojdbc8.jar
//뽑아낼수있는값 , 유저가가지고있는 테이블,기본키,기본키의인덱스,컬럼명,컬럼수,로우수,pk이름,테이블내용
// JOptionPane.showMessageDialog(null, "입력하신 데이터 ", "기본 키 또는 값 불명", JOptionPane.OK_OPTION);
//문제 1 , 업데이트 후 셀렉테이블하면 인덱스아웃 오류  // 해결
//문제 2 , 인설트 하려면 텍스트필드 남아있어야함.  //textArray[k33].setEnabled(true); 인설트할땐 쓸수 있게만들기.// 해결
//문제 3 , select 문 넣을 공간에 테이블관련도 넣기 // 완료 = 13번 해결방향결정.
//문제 4 , 익셉션 뜨면 경고창 띄워서 못하게하기 // 완료 
//문제 5 , insert get 로딩 문제 // 해결
//문제 6 , 종료하는 시스템 버튼 만들고 // 해결
//문제 7 , 글자색바꾸고 // 해결
//문제 8 , 셀렉문에 조인문 , 그룹바이, 오더바이 가능할까요 말까요 // 해결
//문제 9 , insertsetting 하는거 눌러야 insert 활성화, 기본키 활성화 // 해결
//문제 10, 기본키인 PK가 가변적으로 관례상 첫번째만 들어가는게 아니라 마지막에도 들어 갈 수 있어서 PK인덱스값을 뽑아서 그 컬럼에 맞는 곳을 비활성화 // 해결
//문제 11, 인설트 눌러서 PK 중복오류가 발생하면 느려지는데 , 그걸 해결하기위해서 InsertSetting 버튼을 눌러야 활성화 되게 , 인설트 후에는 다시 비활성화 //해결
//문제 12, 키가 없는 테이블에 인설트 누르면 널 값의 로우가 생긴당. // 해결
//문제 13, 검색할 내용 텍스트필드에 포커스가 되고나면 콤보박스를 Enable(true) 로 하고 , 그 뒤 listListener 써서 실행 메소드를 불러오기로하자. // 해결
//문제 14, 크리에이트문 같은 DDL 을 콤보박스로 선택했을 때 이벤트발생으로 기본값을 주게 하자. 버튼을 원하는 방향으로 바꿀수 있나.. // 해결
//문제 15,  데이트 파일 땡겨올때 잘라서가져와야함. // 해결
//문제 16, 검색창 백스페이스 , 크리에이트 테이블하면 안보임 // 해결
//문제 18, 인출시퀀스문제 DATE 파일 넣을때 sysdate 인식문제인거같은데..  // 해결 -> jtable 로 바로 넣으려고 해서 오류나는거 넣었다가 다시 가져오면됨
//문제 19, 테이블 변경시 add Combobox 실시간 변경 // 경우의수 1 , " " split 써서 배열로 이름 땡겨오기 , 경우의수 2 땡겨왔을때 ( 붙여쓰는 사람들을 위해 substring 할 것. //해결
//문제 20, 테이블 변경시 자동 커밋 문제가 있으니까 , yes 일때 만들고 no 일 때 리턴 시킬 것, // 해결
//문제 21, commit 부분 만들 것,
//문제 22, id 로그인 하는 부분 만들 것
//문제 23 SYSDATE 어케 넣지ㅣㅣㅣㅣㅣㅣㅣㅣㅣㅣㅣㅣ //  해결
// 셀렉해서 - 뷰생성 - 뷰땡겨서 거기서 검색 // 완료
// 망했따 딜리트했는데 검색됨;; 버튼마다 if로 텍스트필드 읽어서 null 이면 셀렉 안되게 하자. // 해결
// 아래 텍스트에서 검색하면 기본키열림 
// 뷰 생성할 때 입력창 띄워서 뷰이름 생성하게 하고 , 하고난뒤에 그거 받아와서 삭제  ,  기본키 위치가 이상함. 기본키 없는애 검색하면, //완료
public class Loginback  extends JFrame implements ActionListener 
{   
	JPanel panel_TOP, panel_CENTER, panel_BOTTOM, panel_CENTER_TOP, panel_CENTER_BOTTOM , panel_CENTER_CENTER;
	JLabel label_Id, label_Url, label_Icon, label_Main, label_Pass;
	JTextField tf_Id, tf_Url;
	JButton btn_Connect, btn_Exit;
	Connection con;
	Container cp;
	JPasswordField tf_Pass;
	boolean conBoolean;

	public static String url , id , pass ;

	Loginback(){
	    init();	
		loginDefaultSetting();
	}
	public void init() {
		cp = getContentPane();
		panel_TOP = new JPanel();
		panel_CENTER = new JPanel();
		panel_BOTTOM = new JPanel();
		panel_CENTER_TOP = new JPanel();
		panel_CENTER_BOTTOM = new JPanel();
		panel_CENTER_CENTER = new JPanel();
		
		label_Id = new JLabel("ID");
		label_Id.setFont(new Font("나눔바른고딕", Font.BOLD, 17));
		label_Id.setHorizontalAlignment(SwingConstants.CENTER);
		label_Url = new JLabel("URI");
		label_Url.setFont(new Font("나눔바른고딕", Font.BOLD, 17));
		label_Url.setHorizontalAlignment(SwingConstants.CENTER);
		label_Main = new JLabel("SQL");
		label_Main.setFont(new Font("나눔바른고딕", Font.BOLD, 30));
		label_Main.setHorizontalAlignment(SwingConstants.CENTER);
		label_Pass = new JLabel("PASSWORD");
		label_Pass.setFont(new Font("나눔바른고딕", Font.BOLD, 17));
		label_Pass.setHorizontalAlignment(SwingConstants.CENTER);
		tf_Url = new JTextField(24);
		tf_Id = new JTextField(25);
		tf_Pass = new JPasswordField(18);
		btn_Connect = new JButton("접속");
		btn_Exit = new JButton("종료");

		panel_TOP.setBackground(new Color(255, 255, 255));
		panel_CENTER.setBackground(new Color(255, 255, 255));
		panel_BOTTOM.setBackground(new Color(255, 255, 255));

		panel_TOP.setLayout(new BorderLayout());	
		panel_CENTER.setLayout(new FlowLayout());
		panel_BOTTOM.setLayout(new FlowLayout());

		tf_Url.setBorder(new LineBorder(Color.ORANGE, 1));
		tf_Url.setForeground(Color.BLACK);
		tf_Url.setBackground(new Color(255, 255, 255));
		tf_Id.setBorder(new LineBorder(Color.ORANGE, 1));
		tf_Id.setForeground(Color.BLACK);
		tf_Id.setBackground(new Color(255, 255, 255));
		tf_Pass.setBorder(new LineBorder(Color.ORANGE, 1));
		tf_Pass.setForeground(Color.BLACK);
		tf_Pass.setBackground(new Color(255, 255, 255));
		
		panel_TOP.add(label_Main);

		panel_CENTER_TOP.add(label_Url); 
		panel_CENTER_TOP.add(tf_Url);
		panel_CENTER_BOTTOM.add(label_Id);
		panel_CENTER_BOTTOM.add(tf_Id);
		panel_CENTER_CENTER.add(label_Pass);
		panel_CENTER_CENTER.add(tf_Pass);
		panel_CENTER.add(panel_CENTER_TOP);
		panel_CENTER.add(panel_CENTER_BOTTOM);
		panel_CENTER.add(panel_CENTER_CENTER);
		
		btn_Connect.setBorderPainted(false);
		btn_Exit.setBorderPainted(false);
		btn_Connect.setFocusPainted(false);
		btn_Exit.setFocusPainted(false);
		btn_Connect.setBackground(new Color(0, 0, 0));
		btn_Exit.setBackground(new Color(0, 0, 0));
		btn_Connect.setForeground(Color.WHITE);
		btn_Exit.setForeground(Color.WHITE);

		panel_BOTTOM.add(btn_Connect);
		panel_BOTTOM.add(btn_Exit);
		btn_Connect.addActionListener(this);
		btn_Exit.addActionListener(this);

		cp.add(panel_TOP, BorderLayout.NORTH);
		cp.add(panel_CENTER, BorderLayout.CENTER);
		cp.add(panel_BOTTOM, BorderLayout.SOUTH);

		setVisible(true);
		setTitle("Login");
		setSize(500, 250);
		setResizable(false);
		setLocationRelativeTo(null);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}

	public void actionPerformed(ActionEvent e){
		if(e.getSource() == btn_Connect){
			if (tf_Url.getText().equals("")){
				JOptionPane.showMessageDialog(null, "url을 입력해주세요.", "ERROR!", JOptionPane.WARNING_MESSAGE);
			}else if(tf_Id.getText().equals("")){
				JOptionPane.showMessageDialog(null, "SQL 사용자명을 입력해주세요.", "ERROR!", JOptionPane.WARNING_MESSAGE);
			}else if(tf_Pass.getText().equals("")){
				JOptionPane.showMessageDialog(null, "비밀번호를 입력해주세요", "ERROR!", JOptionPane.WARNING_MESSAGE);
			}else{
				url = tf_Url.getText().trim();
				id = tf_Id.getText().trim();
				pass = tf_Pass.getText().trim();
				DBcheck();
				btn_Connect.setEnabled(false);
				tf_Id.setEnabled(false);
				tf_Url.setEnabled(false);
				tf_Pass.setEnabled(false);
				setVisible(false);
				if(conBoolean){
					JAE1 jae = new JAE1(url ,id ,pass);
				}
			}
		}else if(e.getSource() == btn_Exit){
			int Loginexits = JOptionPane.showConfirmDialog(null, "종료하시겠습니까?", "종료", JOptionPane.YES_NO_OPTION);
			 if(Loginexits == JOptionPane.YES_OPTION){  
				System.exit(0);
			 }else if(Loginexits == JOptionPane.NO_OPTION){
				return;
			 }
		}
	}

	boolean DBcheck(){
		try{
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con = DriverManager.getConnection(url , id , pass); // 기본 값 scott , tiger
			conBoolean = true;
		}catch(ClassNotFoundException ce){
			pln("ClassNotFoundException");
			JOptionPane.showMessageDialog(null, "드라이버 확인 바랍니다.", "ERROR!", JOptionPane.WARNING_MESSAGE);
			conBoolean = false;
		}catch(SQLException se){
			pln("SQLException");
			JOptionPane.showMessageDialog(null, "DB 연결 실패 계정정보를 확인해주세요.", "ERROR!", JOptionPane.WARNING_MESSAGE);
			conBoolean = false;
			new Login();
		}
		return conBoolean; 	
	}

	void loginDefaultSetting(){
		tf_Url.setText("jdbc:oracle:thin:@127.0.0.1:1521:JAVA");
		tf_Id.setText("scott");
		tf_Pass.setText("tiger");
	}

	void p(String str){
		System.out.print(str);
	}

	void pln(String str){
		System.out.println(str);
	}

	public static void main(String[] args) 
	{	
		Loginback l = new Loginback();
	}
}
